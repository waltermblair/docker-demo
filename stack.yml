version: '3.1'

services:
  gui: # https://mherman.org/blog/dockerizing-a-react-app/
    image: localhost:5000/my-gui
    container_name: gui
    build:
      context: ../app/
      dockerfile: Dockerfile
    volumes:
      - ../app:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=development
    depends_on:
      - brain

  brain:
    # image: waltermblair/go-brain
    image: localhost:5000/my-brain
    container_name: brain
    ports:
      - 8080:8080
    external_links:
      - rabbitmq:docker-rabbitmq
      - mysql:docker-mysql
    environment:
      RABBIT_HOST: docker-rabbitmq
      THIS_QUEUE: "0"
      MYSQL_HOST: docker-mysql
    depends_on:
      - rabbitmq
      - mysql

# # TODO - deploy: mode: replicated replicas: 2
  logic:
    # image: waltermblair/go-logic
    image: localhost:5000/my-logic
    container_name: logic1
    external_links:
      - rabbitmq:docker-rabbitmq
    environment:
      RABBIT_HOST: docker-rabbitmq
      THIS_QUEUE: "1"
    ports:
      - 8081:8080
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "/"
    expose:
      - "5672"
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - ./rabbit/rabbitmq.conf:/etc/rabbitmq.conf:ro
      - ./rabbit/rabbitDefs.json:/etc/rabbitmq/definitions.json:ro

  mysql:
    image: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: store
      MYSQL_USER: guest
      MYSQL_PASSWORD: guest
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./logs/mysql:/var/log/mysql/

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    environment:
      PMA_ARTBITRARY: 1
      MYSQL_USER: guest
      MYSQL_PASSWORD: guest
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 8085:80
    links:
      - mysql:db
    depends_on:
      - mysql

  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    image: "docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}"
    environment:
      http.host: 0.0.0.0
      transport.host: 127.0.0.1
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: -Xms${ES_JVM_HEAP} -Xmx${ES_JVM_HEAP}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/elasticsearch.yml
      # - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "-u", "elastic:${ES_PASSWORD}", "http://localhost:9200/_cat/health"]
    networks:
      - stack

  kibana:
    container_name: kibana
    hostname: kibana
    image: "docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}"
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/kibana.yml
    ports:
      - 5601:5601
    networks: ['stack']
    depends_on:
      - elasticsearch
    restart: on-failure
    environment:
      ELASTICSEARCH_PASSWORD: ${ES_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/login"]
      retries: 6

  filebeat:
    container_name: filebeat
    hostname: filebeat
    user: root
    image: "docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}"
    volumes:
      - ./config/beats/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./config/beats/filebeat/prospectors.d/:/usr/share/filebeat/prospectors.d/
      - ./logs/mysql/:/var/log/mysql/
      - /private/var/log/:/var/log/host/:ro
      - /var/lib/docker/containers:/hostfs/var/lib/docker/containers
      - fbdata:/usr/share/filebeat/data/
    networks:
      - stack
    command: filebeat -e -E output.elasticsearch.username=elastic -E output.elasticsearch.password=${ES_PASSWORD} -strict.perms=false
    restart: on-failure
    depends_on:
      - elasticsearch

  configure_stack:
    container_name: configure_stack
    image: docker.elastic.co/beats/metricbeat:${ELASTIC_VERSION}
    volumes:
      - ./init/configure-stack.sh:/usr/local/bin/configure-stack.sh:ro
      - ./init/pipelines/:/usr/local/bin/pipelines/
      - ./init/templates/:/usr/local/bin/templates/
      - ./init/export.json:/usr/local/export.json
    command: ['/bin/bash', '-c', 'cat /usr/local/bin/configure-stack.sh | tr -d "\r" | bash']
    networks:
      - stack
    environment: 
      ELASTIC_VERSION: ${ELASTIC_VERSION}
      ES_PASSWORD: ${ES_PASSWORD}
      DEFAULT_INDEX_PATTERN=: ${DEFAULT_INDEX_PATTERN}
    depends_on:
      - elasticsearch
      - kibana

volumes:
  #Es data
  # esdata:
  #   driver: local
  fbdata:
    driver: local

networks: {stack: {}}
